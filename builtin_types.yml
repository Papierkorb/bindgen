# Built-in types for Bindgen.
# Describes sane defaults to map built-in C/C++ types to Crystal.

void: { binding_type: Void, kind: Struct, builtin: true }

# Boolean type
bool: { binding_type: Bool, crystal_type: Bool, cpp_type: bool, kind: Struct, builtin: true }
_Bool: { alias_for: bool }

# Integer types
char: { binding_type: UInt8, kind: Struct, builtin: true }
"unsigned char": { binding_type: UInt8, kind: Struct, builtin: true }
"signed char": { binding_type: Int8, kind: Struct, builtin: true }
short: { binding_type: Int16, kind: Struct, builtin: true }
"unsigned short": { binding_type: UInt16, kind: Struct, builtin: true }
int: { binding_type: Int32, kind: Struct, builtin: true }
"unsigned int": { binding_type: UInt32, kind: Struct, builtin: true }
_Int: { binding_type: Int, crystal_type: Int, cpp_type: int, kind: Struct, builtin: true }

# Long types
"long int": { binding_type: "LibC::Long", kind: Struct, builtin: true }
"long long int": { binding_type: "LibC::LongLong", kind: Struct, builtin: true }
"unsigned long int": { binding_type: "LibC::ULong", kind: Struct, builtin: true }
"unsigned long long int": { binding_type: "LibC::ULongLong", kind: Struct, builtin: true }

# Fixed-size integer types
int8_t: { binding_type: Int8, kind: Struct, builtin: true }
int16_t: { binding_type: Int16, kind: Struct, builtin: true }
int32_t: { binding_type: Int32, kind: Struct, builtin: true }
int64_t: { binding_type: Int64, kind: Struct, builtin: true }
uint8_t: { binding_type: UInt8, kind: Struct, builtin: true }
uint16_t: { binding_type: UInt16, kind: Struct, builtin: true }
uint32_t: { binding_type: UInt32, kind: Struct, builtin: true }
uint64_t: { binding_type: UInt64, kind: Struct, builtin: true }

# Size types
size_t: { binding_type: "LibC::SizeT", kind: Struct, builtin: true }
ssize_t: { binding_type: "LibC::SSizeT", kind: Struct, builtin: true }

# Float types
float: { binding_type: Float32, kind: Struct, builtin: true }
double: { binding_type: Float64, kind: Struct, builtin: true }

# Integer types without `int`
unsigned: { alias_for: "unsigned int" }
"long": { alias_for: "long int" }
"long long": { alias_for: "long long int" }
"unsigned long": { alias_for: "unsigned long int" }
"unsigned long long": { alias_for: "unsigned long long int" }

# C++ STL
"std::string":
  builtin: true
  kind: Struct
  opaque: true
  pass_by: Value
  wrapper_pass_by: Value
  crystal_type: String
  cpp_type: CrystalString
  binding_type: CrystalString
  to_cpp: "bindgen_crystal_to_stdstring(%)"
  from_cpp: "bindgen_stdstring_to_crystal(%)"
  from_crystal: "Binding::CrystalString.new(ptr: %.to_unsafe, size: %.bytesize)"
  to_crystal: "String.new(%.ptr, %.size)"

# Qt specific types
uchar: { binding_type: UInt8, kind: Struct, builtin: true }
ushort: { binding_type: UInt16, kind: Struct, builtin: true }
uint: { binding_type: UInt32, kind: Struct, builtin: true }
if_os_is_windows: # LLP64
  ulong: { binding_type: UInt32, kind: Struct, builtin: true }
else: # LP64
  ulong: { binding_type: UInt64, kind: Struct, builtin: true }
ulonglong: { binding_type: UInt64, kind: Struct, builtin: true }

if_pointersize_is_32:
  qptrdiff: { binding_type: Int32, kind: Struct, builtin: true }
  qintptr: { binding_type: Int32, kind: Struct, builtin: true }
  quintptr: { binding_type: UInt32, kind: Struct, builtin: true }
else:
  qptrdiff: { binding_type: Int64, kind: Struct, builtin: true }
  qintptr: { binding_type: Int64, kind: Struct, builtin: true }
  quintptr: { binding_type: UInt64, kind: Struct, builtin: true }

quint8: { alias_for: uint8_t }
quint16: { alias_for: uint16_t }
quint32: { alias_for: uint32_t }
quint64: { alias_for: uint64_t }
qulonglong: { alias_for: uint64_t }
qint8: { alias_for: int8_t }
qint16: { alias_for: int16_t }
qint32: { alias_for: int32_t }
qint64: { alias_for: int64_t }
qlonglong: { alias_for: int64_t }
qsizetype: { alias_for: size_t } # Since Qt5.10

if_architecture_is_arm: # Only Float32 on ARM
  qreal: { alias_for: float }
elsif_architecture_is_armhf:
  qreal: { alias_for: float }
else: # Float64 on everything else
  qreal: { alias_for: double }
